FUNCTION_BLOCK FuzzyMsPacMan	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables

	BLINKYconfidence : REAL;
	PINKYconfidence : REAL;
	INKYconfidence : REAL;
	SUEconfidence : REAL;

	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;

	BLINKYdirection : REAL;
	PINKYdirection : REAL;
	INKYdirection : REAL;
	SUEdirection : REAL;

	BLINKYedibleTime : REAL;
	PINKYedibleTime : REAL;
	INKYedibleTime : REAL;
	SUEedibleTime : REAL;

	BLINKYlairTime : REAL;
	PINKYlairTime : REAL;
	INKYlairTime : REAL;
	SUElairTime : REAL;

	PILLSnear : REAL;
	LAIRdistance : REAL;
	NEARESTCORNERDistance : REAL;

	PP0distance : REAL;
	PP1distance : REAL;
	PP2distance : REAL;
	PP3distance : REAL;
	
	G4CONFIDENCE_high : REAL;
	G3CONFIDENCE_high : REAL;
	G2CONFIDENCE_high : REAL;
	G1CONFIDENCE_high : REAL;
	
	G4CONFIDENCE_medium : REAL;
	G3CONFIDENCE_medium : REAL;
	G2CONFIDENCE_medium : REAL;
	G1CONFIDENCE_medium : REAL;
	
	G4CONFIDENCE_low : REAL;
	G3CONFIDENCE_low : REAL;
	G2CONFIDENCE_low : REAL;
	G1CONFIDENCE_low : REAL;
	
	G4DISTANCE_far : REAL;
	G3DISTANCE_far : REAL;
	G2DISTANCE_far : REAL;
	G1DISTANCE_far : REAL;
	
	G4DISTANCE_medium : REAL;
	G3DISTANCE_medium : REAL;
	G2DISTANCE_medium : REAL;
	G1DISTANCE_medium : REAL;
	
	G4DISTANCE_near : REAL;
	G3DISTANCE_near : REAL;
	G2DISTANCE_near : REAL;
	G1DISTANCE_near : REAL;
	
END_VAR

VAR_OUTPUT				// Define output variable
	Runaway : REAL;
	GoToPPill: REAL;
	DefaultAction: REAL;
END_VAR


FUZZIFY BLINKYconfidence			
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY INKYconfidence			
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY PINKYconfidence			
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY SUEconfidence			
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY

FUZZIFY BLINKYdistance		
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY BLINKYdirection			
	TERM up := (0, 1); 
	TERM right := (1, 1);
	TERM down := (2, 1);
	TERM left := (3, 1);
END_FUZZIFY
FUZZIFY PINKYdirection			
	TERM up := (0, 1); 
	TERM right := (1, 1);
	TERM down := (2, 1);
	TERM left := (3, 1);
END_FUZZIFY
FUZZIFY INKYdirection			
	TERM up := (0, 1); 
	TERM right := (1, 1);
	TERM down := (2, 1);
	TERM left := (3, 1);
END_FUZZIFY
FUZZIFY SUEdirection			
	TERM up := (0, 1); 
	TERM right := (1, 1);
	TERM down := (2, 1);
	TERM left := (3, 1);
END_FUZZIFY

FUZZIFY BLINKYedibleTime		
	TERM chasing := (0, 1); 
	TERM closeChasing := (0, 0)(1, 1)(7, 0);
	TERM edible := (7, 0)(8, 1)(15, 0);
	TERM edibleSecure := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY PINKYedibleTime			
	TERM chasing := (0, 1); 
	TERM closeChasing := (0, 0)(1, 1)(7, 0);
	TERM edible := (7, 0)(8, 1)(15, 0);
	TERM edibleSecure := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY INKYedibleTime			
	TERM chasing := (0, 1); 
	TERM closeChasing := (0, 0)(1, 1)(7, 0);
	TERM edible := (7, 0)(8, 1)(15, 0);
	TERM edibleSecure := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY SUEedibleTime			
	TERM chasing := (0, 1); 
	TERM closeChasing := (0, 0)(1, 1)(7, 0);
	TERM edible := (7, 0)(8, 1)(15, 0);
	TERM edibleSecure := (15, 0)(16, 1)(50, 1);
END_FUZZIFY


FUZZIFY BLINKYlairTime		
	TERM out := (0, 1); 
	TERM closeOut := (0, 0)(1, 1)(7, 0);
	TERM locked := (7, 0)(8, 1)(15, 0);
	TERM lockedLong := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY PINKYlairTime			
	TERM out := (0, 1); 
	TERM closeOut := (0, 0)(1, 1)(7, 0);
	TERM locked := (7, 0)(8, 1)(15, 0);
	TERM lockedLong := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY INKYlairTime			
	TERM out := (0, 1); 
	TERM closeOut := (0, 0)(1, 1)(7, 0);
	TERM locked := (7, 0)(8, 1)(15, 0);
	TERM lockedLong := (15, 0)(16, 1)(50, 1);
END_FUZZIFY
FUZZIFY SUElairTime			
	TERM out := (0, 1); 
	TERM closeOut := (0, 0)(1, 1)(7, 0);
	TERM locked := (7, 0)(8, 1)(15, 0);
	TERM lockedLong := (15, 0)(16, 1)(50, 1);
END_FUZZIFY

FUZZIFY PILLSnear			
	TERM few := (1, 1)(20, 0); 
	TERM medium :=  gauss 30 11;
	TERM high := (20, 0)(30, 1)(200, 1);
END_FUZZIFY

FUZZIFY LAIRdistance			
	TERM near := (0, 1) (20, 0) ; 
	TERM medium := gauss 40 20;
	TERM far := (40, 0) (60, 1) (200, 1);
END_FUZZIFY

FUZZIFY NEARESTCORNERDistance			
	TERM near := (0, 1) (10, 0) ; 
	TERM medium := gauss 10 40;
	TERM far := (30, 0) (50, 1) (200, 1);
END_FUZZIFY

FUZZIFY PP0distance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PP1distance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PP2distance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PP3distance			
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

//FACTORES PARA TENER UNA MAYOR FACILIDAD A LA HORA DE CREAR REGLAS
//conocer la confianza respectoa la posicion de los fantasmas
FUZZIFY G4CONFIDENCE_high			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3CONFIDENCE_high			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2CONFIDENCE_high			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1CONFIDENCE_high			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G4CONFIDENCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3CONFIDENCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2CONFIDENCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1CONFIDENCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G4CONFIDENCE_low			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3CONFIDENCE_low			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2CONFIDENCE_low			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1CONFIDENCE_low			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
//conocer la distancia respecto a los fantasmas
FUZZIFY G4DISTANCE_far		
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3DISTANCE_far			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2DISTANCE_far			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1DISTANCE_far			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G4DISTANCE_medium		
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3DISTANCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2DISTANCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1DISTANCE_medium			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G4DISTANCE_near		
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G3DISTANCE_near			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G2DISTANCE_near			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY
FUZZIFY G1DISTANCE_near			
	TERM true := (0, 0) (1,1) ; 
	TERM false := (0, 1) (1, 0);
END_FUZZIFY


DEFUZZIFY Runaway			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY GoToPPill			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY DefaultAction		
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY


//se podria guardar cuantos fantasmas cumplen x condicion
RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1: IF PILLSnear IS few OR PILLSnear IS medium OR PILLSnear IS high THEN DefaultAction IS emergency;

	//if powerpill cerca && todos los fantasmas a media distancia && confianza alta o media ir a pp
	
	//
	
	
	
	//plantilla todos fantasmas
	//RULE 1 : IF BLINKYdistance IS medium AND BLINKYconfidence IS high AND PINKYdistance IS medium AND PINKYconfidence IS high AND
	//INKYdistance IS medium AND INKYconfidence IS high AND SUEdistance IS medium AND SUEconfidence IS high AND 
	//THEN PacmanChasePowerPill IS emergency;
	//(x OR x) AND y == (x ||x) && y 

	// RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN Runaway IS emergency;
	// RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN Runaway IS emergency;
	// RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high THEN Runaway IS emergency;
	// RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high THEN Runaway IS emergency;
	// RULE 5 : IF BLINKYconfidence IS medium THEN GoToPPill IS nervious;
	// RULE 6 : IF PINKYconfidence IS medium THEN GoToPPill IS nervious;
	// RULE 7 : IF INKYconfidence IS medium THEN GoToPPill IS nervious;
	// RULE 8 : IF SUEconfidence IS medium THEN GoToPPill IS nervious;
	// RULE 9 : IF BLINKYdistance IS far THEN Runaway IS calm;
	// RULE 10 : IF PINKYdistance IS far THEN Runaway IS calm;
	// RULE 11 : IF INKYdistance IS far THEN Runaway IS calm;
	// RULE 12 : IF SUEdistance IS far THEN Runaway IS calm;

	//IF 4fantasmasCerca && buenas tardes THEN hola
END_RULEBLOCK

END_FUNCTION_BLOCK

